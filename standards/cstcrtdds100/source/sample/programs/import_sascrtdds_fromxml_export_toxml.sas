**********************************************************************************;
* Copyright (c) 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.   *;
* SPDX-License-Identifier: Apache-2.0                                            *;
*                                                                                *;
* import_sascrtdds_fromxml_export_toxml.sas                                      *;
*                                                                                *;
* Sample driver program to import a CDISC-CRTDDS (define_import.xml) file        *;
* and subsequently export the created SAS representation of the imported         *;
* metadata to a CRT-DDS (define_export.xml) file.                                *;
*                                                                                *;
* The SAS Clinical Standards Toolkit (CST) represents the CRT-DDS data model in  *;
* 39 SAS data sets. Only a limited number of these datasets (12) can be          *;
* automatically generated by CST from the SDTM data sets.                        *;
* The remaining (extended) metadata needs to be added by the user to the 39 SAS  *;
* data sets through a process that manages the metadata in these datasets.       *;
* Examples of this extended metadata includes value level metadata, links to an  *;
* annotated CRF and a reviewers guide and information about external codelists.  *;
* This driver program demonstrates that this extended metadata can be imported   *;
* from an xml file (define_import.xml) to the 39 CRET-DDS data sets.             *;
* For this proof-of-concept these 39 datasets are created in the SAS WORK        *;
* library.                                                                       *;
* The program also shows that when this extended metadata is available in the 39 *;
* SAS data sets that represent the CRT-DDS data model, it can be exported to an  *;
* xml file (define_export.xml).                                                  *;
*                                                                                *;
* CSTversion  1.4                                                                *;
*                                                                                *;
* The following statements may require information from the user                 *;
**********************************************************************************;

%let _cstSetupSrc=SASREFERENCES;
%let _cstStandard=CDISC-CRTDDS;
%let _cstStandardVersion=1.0;

%cst_setStandardProperties(_cstStandard=CST-FRAMEWORK,_cstSubType=initialize);

*****************************************************************************************************;
* The following data step sets (at a minimum) the studyrootpath and studyoutputpath.  These are     *;
* used to make the driver programs portable across platforms and allow the code to be run with      *;
* minimal modification. These nacro variables by default point to locations within the              *;
* cstSampleLibrary, set during install but modifiable thereafter.  The cstSampleLibrary is assumed  *;
* to allow write operations by this driver module.                                                  *;
*****************************************************************************************************;

%cstutil_setcstsroot;
data _null_;
  call symput('studyRootPath',cats("&_cstSRoot","/cdisc-crtdds-1.0-&_cstVersion"));
  call symput('studyOutputPath',cats("&_cstSRoot","/cdisc-crtdds-1.0-&_cstVersion"));
run;
%let workPath=%sysfunc(pathname(work));

************************************************************;
* Debugging aid:  set _cstDebug=1                          *;
* Note value may be reset in call to cstutil_processsetup  *;
*  based on property settings.  It can be reset at any     *;
*  point in the process.                                   *;
************************************************************;
%let _cstDebug=0;
data _null_;
  _cstDebug = input(symget('_cstDebug'),8.);
  if _cstDebug then
    call execute("options &_cstDebugOptions;");
  else
    call execute(("%sysfunc(tranwrd(options %cmpres(&_cstDebugOptions), %str( ), %str( no)));"));
run;

*****************************************************************************************;
* The following macro (cstutil_processsetup) utilizes the following parameters:         *;
*                                                                                       *;
* _cstSASReferencesSource - Setup should be based upon what initial source?             *;
*   Values: SASREFERENCES (default) or RESULTS data set. If RESULTS:                    *;
*     (1) no other parameters are required and setup responsibility is passed to the    *;
*                 cstutil_reportsetup macro                                             *;
*     (2) the results data set name must be passed to cstutil_reportsetup as            *;
*                 libref.memname                                                        *;
*                                                                                       *;
* _cstSASReferencesLocation - The path (folder location) of the sasreferences data set  *;
*                              (default is the path to the WORK library)                *;
*                                                                                       *;
* _cstSASReferencesName - The name of the sasreferences data set                        *;
*                              (default is sasreferences)                               *;
*****************************************************************************************;

%cstutil_processsetup(_cstSASReferencesLocation=&studyrootpath/control,
                      _cstSASReferencesName=import_sasreferences);

***************************************************************************;
* Run the cross-standard schema validation macro.                         *;
* Running cstutilxmlvalidate is not required.  The crtdds_read macro will *;
* attempt to import an invalid crtdds xml file. However, importing an     *;
* invalid crtdds xml file may result in an incomplete import.             *;
*                                                                         *;
* cstutilxmlvalidate parameters (all optional):                           *;
*  _cstSASReferences:  The SASReferences data set provides the location   *:
*          of the to-be-validate XML file associated with a registered    *;
*          standard and standardversion (default:  &_cstSASRefs).         *;
*  _cstLogLevel:  Identifies the level of error reporting.                *;
*          Valid values: Info (default) Warning, Error, Fatal Error       *;
*  _cstCallingPgm:  The name of the driver module calling this macro      *;
***************************************************************************;

%cstutilxmlvalidate();

***************************************************************************;
* Run the standard-specific (CRTDDS) macro.                               *;
***************************************************************************;

%crtdds_read();

*****************************************************************************************;
* Clinical Standards Toolkit utilizes autocall macro libraries to contain and           *;
*  reference standard-specific code libraries.  Once the autocall path is set and one   *;
*  or more macros have been used within any given autocall library, deallocation or     *;
*  reallocation of the autocall fileref cannot occur unless the autocall path is first  *;
*  reset to exclude the specific fileref.                                               *;
*                                                                                       *;
* This becomes a problem only with repeated calls to %cstutil_processsetup() or         *;
*  %cstutil_allocatesasreferences within the same sas session.  Doing so, without       *;
*  submitting code similar to the code below may produce SAS errors such as:            *;
*     ERROR - At least one file associated with fileref CRTCODE is still in use.        *;
*     ERROR - Error in the FILENAME statement.                                          *;
*                                                                                       *;
* If you call %cstutil_processsetup() or %cstutil_allocatesasreferences more than once  *;
*  within the same sas session, typically using %let _cstReallocateSASRefs=1 to tell    *;
*  CST to attempt reallocation, use of the following code is recommended between each   *;
*  code submission.                                                                     *;
*                                                                                       *;
* Use of the following code is NOT needed to run this driver module initially.          *;
*****************************************************************************************;
%let _cstReallocateSASRefs=1;
%include "&_cstGRoot/standards/cst-framework-&_cstVersion/programs/resetautocallpath.sas";


%cstutil_processsetup(_cstSASReferencesLocation=&studyrootpath/control,
                      _cstSASReferencesName=export_sasreferences);

***************************************************************************;
* Run the standard-specific (CRTDDS) macro.                               *;
***************************************************************************;
%crtdds_write();
%cstutilxmlvalidate();
