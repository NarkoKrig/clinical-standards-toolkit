%* Copyright (c) 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.   *;
%* SPDX-License-Identifier: Apache-2.0                                            *;
%*                                                                                *;
%* cstutil_createreport                                                           *;
%*                                                                                *;
%* Creates a report that documents the data sets generated by a process.          *;
%*                                                                                *;
%* The report for the SAS Clinical Standards Toolkit process is based on the      *;
%* Results and Metrics data sets that are generated by the process.               *;
%*                                                                                *;
%* @macvar _cstRptResultsDS Report results data set created by a SAS Clinical     *;
%*             Standards Toolkit process                                          *;
%* @macvar _cstRptMetricsDS Report metrics data set created by a SAS Clinical     *;
%*             Standards Toolkit process                                          *;
%* @macvar _cstUniqueTablesCnt Count of unique reporting tables                   *;
%* @macvar _cstUniqueTables List of unique reporting tables                       *;
%* @macvar _cstError Returned error code                                          *;
%* @macvar _cst_rc Task error status                                              *;
%* @macvar _cstDebug Turns debugging on or off for the session                    *;
%*                                                                                *;
%* @param _cstSASReferencesDSet - conditional - The SASReferences data set that is*;
%*            used by a SAS Clinical Standards Toolkit process. Either this data  *;
%*            set or the _cstresultsdset must exist.                              *;
%* @param _cstResultsDSet - conditional - The Results data set that is created by *;
%*            a SAS Clinical Standards Toolkit process. Either this data set or   *;
%*            the _cstsasreferencesdset must exist.                               *;
%*            Default: &_cstRptResultsDS                                          *;
%* @param _cstMetricsDSet - optional - The Metrics data set that is created by a  *;
%*            SAS Clinical Standards Toolkit process.                             *;
%*            Default: &_cstRptMetricsDS                                          *;
%* @param _cstReportByTable - optional - Generate Report1 (by checkid) results or *;
%*            Report2 (by table) results.                                         *;
%*            N: Generate Report1.                                                *;
%*            Y: Generate Report2.                                                *;
%*            NOTE: Any value that is not equal to Y is assumed to be N.          *;
%*            Values: Y | N                                                       *;
%*            Default: N                                                          *;
%* @param _cstTableChecksDSet - optional - The data set that specifies a list of  *;
%*            tables for each check. Use of this parameter assumes that this data *;
%*            set has been built before running this report. If this data set does*;
%*            not exist, it is created.                                           *;
%* @param _cstTableChecksCode - conditional - The macro to build                  *;
%*            _cstTableChecksDSet, if it does not exist or is not passed as a     *;
%*            parameter. Required only if _cstReportByTable=Y and                 *;
%*            _cstTableChecksDSet is not specified.                               *;
%* @param _cstKeepTableCheckList - required - For Report2, keep the derived       *;
%*            list of tables (_csttablechecklist) to reuse in subsequent report   *;
%*            requests. Building this file might take awhile.                     *;
%*            NOTE: Any value that is not equal to Y is assumed to be N.          *;
%*            Values: Y | N                                                       *;
%*            Default: N                                                          *;
%* @param _cstTableSubset - optional - For Report 2, subset Results data set to   *;
%*            the specified source data set. If blank or _ALL_, all records are   *;
%*            printed. Example: DM.                                               *;
%* @param _cstReportErrorsOnly - optional - Print only non-informational Results  *;
%*            data set records.                                                   *;
%*            NOTE: Any value that is not equal to N is assumed to be Y.          *;
%*            Values: Y | N                                                       *;
%*            Default: Y                                                          *;
%* @param _cstReportObs - optional - The number of Results data set records (per  *;
%*            checkid) to print. If blank, all records are printed.               *;
%* @param _cstReportOutput - required - The path and filename in which to write   *;
%*            the report output.                                                  *;
%*            Values: Y | N                                                       *;
%*            Default: Y                                                          *;
%* @param _cstSummaryReport - optional - Generate the Report Summary panel.       *;
%*            NOTE: Any value that is not equal to N is assumed to be Y.          *;
%*            Values: Y | N                                                       *;
%*            Default: Y                                                          *;
%* @param _cstIOReport - optional - Generate the Process Inputs/Outputs panel.    *;
%*            NOTE: Any value that is not equal to N is assumed to be Y.          *;
%*            Values: Y | N                                                       *;
%*            Default: Y                                                          *;
%* @param _cstMetricsReport - optional - Generate the Process Metrics panel.      *;
%*            NOTE: Any value that is not equal to N is assumed to be Y.          *;
%*            Values: Y | N                                                       *;
%*            Default: Y                                                          *;
%* @param _cstGeneralResultsReport - optional - Generate the General Process      *;
%*            Reporting panel.                                                    *;
%*            NOTE: Any value that is not equal to N is assumed to be Y.          *;
%*            Values: Y | N                                                       *;
%*            Default: Y                                                          *;
%* @param _cstCheckIDResultsReport - optional - Generate the Process Results      *;
%*            panel.                                                              *;
%*            NOTE: Any value that is not equal to N is assumed to be Y.          *;
%*            Values: Y | N                                                       *;
%*            Default: Y                                                          *;
%*                                                                                *;
%* @since 1.3                                                                     *;
%* @exposure external                                                             *;

%macro cstutil_createreport(
    _cstSASReferencesDSet=,
    _cstResultsDSet=&_cstRptResultsDS,
    _cstMetricsDSet=&_cstRptMetricsDS,
    _cstReportErrorsOnly=N,
    _cstReportObs=,
    _cstReportByTable=N,
    _cstTableChecksDSet=,
    _cstTableChecksCode=,
    _cstKeepTableCheckList=N,
    _cstTableSubset=,
    _cstReportOutput=,
    _cstSummaryReport=Y,
    _cstIOReport=Y,
    _cstMetricsReport=Y,
    _cstGeneralResultsReport=Y,
    _cstCheckIDResultsReport=Y
    ) / des='CST: Create a process report';

  %local
    _cstDate
    _cstReportFormat
    _cstReportRuntime
    _cstStd
    _cstStdVer
    _cstType
  ;

  %global
    _cstUniqueTablesCnt
    _cstUniqueTables
    _cstError
  ;

  %let _cstError=0;

  %* Do not attempt to run if there has been a set-up error  *;
  %if &_cst_rc %then
  %do;
    %put ************************************************************;
    %put ERROR: Fatal error encountered, report process cannot start.;
    %put ************************************************************;
    %goto exit_macro;
  %end;

  %************************************************************************;
  %*  Check for location of report output.  Abort if missing or invalid.  *;
  %************************************************************************;

  %if &_cstReportOutput= %then
  %do;
    %put Note: The location for report output is required;
    %* Write information to the results data set about this run. *;
    %cstutil_writeresult(_cstResultID=CST0200,_cstResultParm1=Report not run - The location for report output is required,_cstSeqNoParm=1,_cstSrcDataParm=CSTUTIL_CREATEREPORT);
    %goto exit_macro;
  %end;
  %else
  %do;
    data _null_;
      length fname $400;
      fname=kstrip(symget("_cstReportOutput"));
      if kindexc(fname,"/\:")>0 then
      do;
        lfname=klength(fname);
        doc=kreverse(ksubstr(kreverse(fname),1,kindexc(kreverse(fname),"/\")-1));
        ldoc=klength(doc);
        if ldoc gt 0 then ldoc+1;
        path=ksubstr(fname,1,lfname-ldoc);
        rc=filename("mydir",path);
        did=dopen("mydir");
        if did = 0 then
           call symputx('_cstError',1);
        else
          did=dclose(did);
      end;
    run;
  %end;
  %if &_cstError=1 %then
  %do;
    %cstutil_writeresult(_cstResultID=CST0200,_cstResultParm1=Report not run - The location for report output (&_cstReportOutput) could not be opened,_cstSeqNoParm=1,_cstSrcDataParm=CSTUTIL_CREATEREPORT);
    %goto exit_macro;
  %end;

  %*****************************************************************;
  %*  Must have SASRefs or Results.  Abort if both are missing.    *;
  %*****************************************************************;

  %if &_cstSASReferencesDSet= and &_cstResultsDSet= %then
  %do;
    %put Note: Neither the SAS Reference Data set nor the Results data set have been provided.  Please supply parameters.;
    %* Write information to the results data set about this run. *;
    %cstutil_writeresult(_cstResultID=CST0200,_cstResultParm1=Report not run - Neither the SAS Reference Data set nor the Results data set have been provided,_cstSeqNoParm=1,_cstSrcDataParm=CSTUTIL_CREATEREPORT);
    %goto exit_macro;
  %end;

  %*****************************************************************;
  %*  Check for existence of Results data set.  Abort if missing.  *;
  %*****************************************************************;

  %if not %sysfunc(exist(&_cstResultsDSet)) %then
  %do;
    %put Warning: The results data set &_cstResultsDSet DOES NOT EXIST!;
    %* Write information to the results data set about this run. *;
    %cstutil_writeresult(_cstResultID=CST0200,_cstResultParm1=Report not run - The results data set &_cstResultsDSet does not exist,_cstSeqNoParm=1,_cstSrcDataParm=CSTUTIL_CREATEREPORT);
    %goto exit_macro;
  %end;

  %**********************************************************;
  %*  Extract the file extension to determine report style  *;
  %*  Extract date and time this report is run              *;
  %**********************************************************;
  data _null_;
    length fout $400;
    now=datetime();
    call symput('_cstReportRuntime',put(now, is8601dt.));
    fout=reverse(strip(symget("_cstReportOutput")));
    if indexc(fout,'.')>0 then ffmt=reverse(substr(fout,1,indexc(fout,".")-1));
    else ffmt='';
    call symput('_cstReportFormat',ffmt);
  run;

  %****************************************************************;
  %*  Check for allowable file extensions PDF, RTF, CSV and HTML  *;
  %****************************************************************;
  %if &_cstReportFormat= %then
  %do;
    %put Warning: The specified Report file requires an extension (file is &_cstReportOutput )!;
    %goto exit_macro;
  %end;
  %else %if ("%upcase(&_cstReportFormat)" ne "PDF") and ("%upcase(&_cstReportFormat)" ne "RTF") and ("%upcase(&_cstReportFormat)" ne "CSV") and ("%upcase(&_cstReportFormat)" ne "HTML") %then
  %do;
    %put Warning: The specified Report file requires an extension of PDF, RTF, CSV or HTML.  Currently it is %upcase(&_cstReportFormat);
    %goto exit_macro;
  %end;

  data _null_;
    set &_cstRptResultsDS (where=(checkid='' and substr(message,1,7)="PROCESS")) end=last;

    attrib _csttemp format=$200.;

    _csttemp = translate(scan(message,2,''),'',':');
    select(_csttemp);
      when("STANDARD") call symputx('_cstStd',scan(message,3,''));
      when("STANDARDVERSION") call symputx('_cstStdVer',scan(message,3,''));
      when("DATE") call symputx('_cstDate',scan(message,3,''));
      when("TYPE")
      do;
        _csttemp = scan(message,2,':');
        call symputx('_cstType',strip(_csttemp));
      end;
      otherwise;
    end;
  run;

  Title1 "SAS Clinical Standards Toolkit &_cstVersion";
  Title2 "&_cstStd &_cstStdVer &_cstType";
  Title3 " ";
  footnote h=6pt "Report generated &_cstReportRuntime on process run &_cstDate";

  ods listing close;

  filename _cstrpt "&_cstReportOutput";
  ods &_cstReportFormat file=_cstrpt style=sasweb
  %if %upcase(&_cstReportFormat)=PDF %then
  %do;
     pdftoc=1
  %end;
      ;
  ods noproctitle;

  %************************************************************************;
  %*  Produce each of the report panels based on parameter settings.      *;
  %************************************************************************;

  %if %upcase(&_cstSummaryReport) ne N %then
        %cstutil_reportprocesssummary();

  %if %upcase(&_cstIOReport) ne N %then
        %cstutil_reportinputsoutputs();

  %if %upcase(&_cstMetricsReport) ne N %then
        %cstutil_reportprocessmetrics();

  %if %upcase(&_cstGeneralResultsReport) ne N %then
        %cstutil_reportgeneralprocess();

  %if %upcase(&_cstCheckIDResultsReport) ne N %then
        %cstutil_reportprocessresults();

  ods &_cstReportFormat close;
  ods listing;

  %* Write information to the results data set about this run. *;
  filename _cstrpt_ "&_cstReportOutput";
  %if %sysfunc(fexist(_cstrpt_)) %then
  %do;
    %let _cst_rc=0;
    %cstutil_writeresult(_cstResultID=CST0200,_cstResultParm1=Report &_cstReportOutput created,_cstSeqNoParm=1,_cstSrcDataParm=CSTUTIL_CREATEREPORT);
  %end;
  filename _cstrpt_;

  %if %upcase(&_cstKeepTableCheckList) ne Y %then
  %do;
    %cstutil_deleteDataSet(_cstDataSetName=work._csttablelist);
  %end;

%exit_macro:

  %if &_cstDebug=1 %then
  %do;

    %put Leaving macro &sysmacroname;
    %put cstsasreferencesdset=&_cstSASReferencesDSet;
    %put cstresultsdset=&_cstResultsDSet;
    %put cstmetricsdset=&_cstMetricsDSet;
    %put cstreportoutput=&_cstReportOutput;
    %put ReportByTable=&_cstReportByTable;
    %put Table subset=&_cstTableSubset;

  %end;

%mend cstutil_createreport;